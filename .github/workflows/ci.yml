name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Show Poetry info
      run: |
        echo "=== Poetry Version ==="
        poetry --version
        echo "=== Poetry Environment ==="
        poetry env info
        echo "=== Python Version ==="
        python --version
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('pyproject.toml') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        echo "Installing iverilog for Verilog parsing..."
        sudo apt-get update
        sudo apt-get install -y iverilog
        echo "Installing dependencies..."
        poetry install --with test --no-interaction
        echo "Dependencies installed successfully"
        poetry show
        echo "Installing project in development mode..."
        poetry install --no-interaction
    
    - name: Install dependencies (cached)
      if: steps.cached-poetry-dependencies.outputs.cache-hit == 'true'
      run: |
        echo "Installing iverilog for Verilog parsing..."
        sudo apt-get update
        sudo apt-get install -y iverilog
        echo "Installing dependencies from cache..."
        poetry install --with test --no-root --no-interaction
        echo "Dependencies installed successfully from cache"
        poetry show
        echo "Installing project in development mode..."
        poetry install --no-interaction
    
    - name: Run linting
      run: |
        poetry run flake8 svapy/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        poetry run flake8 svapy/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run type checking
      run: |
        poetry run mypy svapy/ --show-error-codes --strict
    
    - name: Run unit tests
      run: |
        echo "=== Current Directory ==="
        pwd
        ls -la
        echo "=== Python Path ==="
        poetry run python -c "import sys; print('\\n'.join(sys.path))"
        echo "=== Testing svapy import ==="
        poetry run python -c "import svapy; print('svapy imported successfully')" || echo "svapy import failed"
        echo "=== Testing individual modules ==="
        poetry run python -c "from svapy.core import generate_module_docstring; print('core imported successfully')" || echo "core import failed"
        poetry run python -c "from svapy.parser import extract_module_ports; print('parser imported successfully')" || echo "parser import failed"
        echo "=== Running unit tests ==="
        poetry run python -m pytest tests/ -m "not integration" --cov=svapy --cov-report=xml -v --tb=short
    
    - name: Run integration tests
      run: |
        echo "=== Running integration tests ==="
        poetry run python -m pytest tests/ -m "integration" --cov=svapy --cov-append --cov-report=xml -v --tb=short
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Test code generation
      run: |
        poetry run python main.py counter example/counter.v || exit 1
        poetry run python main.py multiplier_pipe example/multiplier_pipe.v || exit 1
    
    - name: Test Makefile
      run: |
        make help
        make generate DESIGN=example/counter.v MODULE_NAME=counter
        make python-test DESIGN=example/counter.v MODULE_NAME=counter
    
    - name: Test generated files
      run: |
        # Test that generated files are valid Python
        if [ -f "gen/counter_interface.py" ]; then
          poetry run python -m py_compile gen/counter_interface.py
        fi
        if [ -f "gen/run_counter.py" ]; then
          poetry run python -m py_compile gen/run_counter.py
        fi
        if [ -f "gen/multiplier_pipe_interface.py" ]; then
          poetry run python -m py_compile gen/multiplier_pipe_interface.py
        fi
        if [ -f "gen/run_multiplier_pipe.py" ]; then
          poetry run python -m py_compile gen/run_multiplier_pipe.py
        fi

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: |
        echo "Installing dependencies for build..."
        poetry install --with test --no-interaction
        echo "Dependencies installed successfully for build"
        poetry show
    
    - name: Build package
      run: poetry build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.sha }}
        name: Release ${{ github.sha }}
        body: |
          Automated release from CI/CD pipeline
          
          Commit: ${{ github.sha }}
          Changes in this release:
          - Automated build and test verification
          - Code coverage reporting
          - Integration test validation
        draft: false
        prerelease: false
        files: |
          dist/*.tar.gz
        generate_release_notes: true
